{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["notes","scales","id","name","pattern","intervals","KeyMaster","props","state","rootNote","scale","find","x","newNote","this","setState","newScale","className","map","value","length","onClick","setRootNote","key","setScale","Component","Scale","scaleNotes","scalePattern","index","indexOf","i","push","getNotes","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.507853da.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport MIDISounds from 'midi-sounds-react';\r\nimport './App.css';\r\n\r\nvar notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'Bb', 'B'];\r\n\r\nvar scales = [\r\n    { id: \"major\", name: \"Major Scale\", pattern: [2, 2, 1, 2, 2, 2, 1], intervals: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"] },\r\n    { id: \"natural_minor\", name: \"Natural Minor Scale\", pattern: [2, 1, 2, 2, 1, 2, 2], intervals: [\"1\", \"2\", \"b3\", \"4\", \"5\", \"b6\", \"b7\", \"8\"] },\r\n    { id: \"harmonic_minor\", name: \"Harmonic Minor Scale\", pattern: [2, 1, 2, 2, 1, 3, 1], intervals: [\"1\", \"2\", \"b3\", \"4\", \"5\", \"b6\", \"7\", \"8\"] },\r\n    { id: \"melodic_minor\", name: \"Melodic Minor Scale\", pattern: [2, 1, 2, 2, 2, 2, 1], intervals: [\"1\", \"2\", \"b3\", \"4\", \"5\", \"6\", \"7\", \"8\"] },\r\n    { id: \"pentatonic_major\", name: \"Pentatonic Major Scale\", pattern: [2, 2, 3, 2, 3], intervals: [\"1\", \"2\", \"3\", \"5\", \"6\", \"8\"] },\r\n    { id: \"pentatonic_minor\", name: \"Pentatonic Minor Scale\", pattern: [3, 2, 2, 3, 2], intervals: [\"1\", \"b3\", \"4\", \"5\", \"b7\", \"8\"] },\r\n    { id: \"blues\", name: \"Blues Scale\", pattern: [3, 2, 1, 1, 3, 2], intervals: [\"1\", \"2\", \"b3\", \"4\", \"b5\", \"6\", \"b7\", \"8\"] }\r\n];\r\n\r\nclass KeyMaster extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rootNote: \"C\",\r\n            scale: scales.find(x => x.id === \"major\")\r\n        };        \r\n    }\r\n    \r\n    setRootNote(newNote) {\r\n        this.setState({\r\n            rootNote: newNote,\r\n        });\r\n    }\r\n    setScale(newScale) {\r\n        this.setState({\r\n            scale: scales.find(x => x.id === newScale)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"KeyMaster\">\r\n                <header className=\"App-header\">\r\n                    <div className=\"rootNotes\">\r\n                        {\r\n                            notes.map((value) => {\r\n                                var className = value === this.state.rootNote ? \"active\" : \"\";\r\n                                if (value.length >= 2) {\r\n                                    className += \" sharpflat\";\r\n                                }\r\n                                return (\r\n                                    <button className={className} onClick={() => this.setRootNote(value)} key={value}>{value}</button>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className=\"scalesList\">\r\n                        {\r\n                            scales.map((x) => {\r\n                                return (\r\n                                    <button className={x.id === this.state.scale.id ? \"active\" : \"\"} onClick={() => this.setScale(x.id)} key={x.id}>{x.name}</button>\r\n                                )\r\n                            })\r\n                        }\r\n                        \r\n                    </div>\r\n                </header>\r\n                <div className=\"App-body\">\r\n                    <h1>{this.state.rootNote} {this.state.scale.name}</h1>\r\n                    <Scale\r\n                        rootNote={this.state.rootNote}\r\n                        scale={this.state.scale}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Scale extends Component {\r\n    \r\n    getNotes(rootNote, scale) {\r\n        var scaleNotes = [];\r\n        var scalePattern = scale.pattern;\r\n        var index = notes.indexOf(rootNote);\r\n        for (var i = 0; i <= scalePattern.length; i++) {\r\n            \r\n            if (index >= notes.length) {\r\n                index -= notes.length;\r\n            }\r\n            scaleNotes.push(notes[index]);\r\n            index += scalePattern[i];\r\n        }\r\n        return scaleNotes;\r\n    }\r\n\r\n    render() {\r\n        let scaleNotes = this.getNotes(this.props.rootNote, this.props.scale);\r\n        return (\r\n            <div className=\"scale\">\r\n                {scaleNotes.map((value, index) => {\r\n                    return (\r\n                        <div className=\"notebox\">\r\n                            <strong>{this.props.scale.intervals[index]}</strong><br/>\r\n                            <div className=\"note\">{value}</div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n          <KeyMaster />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}